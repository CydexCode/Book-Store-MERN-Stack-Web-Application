back end-------------------------------------------

file-controllers

books-controller.js

const Book = require("../model/Book");

const getAllBooks = async(req,res,next) =>{
    let books;
try{
    books = await Book.find();
} catch (err) {
    console.log(err);
}
if(!books) {
    return res.status(404).json({ message: "No products found" });
}
return res.status(200).json({ books });
};

const getById = async (req, res, next) =>{
    const id = req.params.id;
    let book;
    try{
        book = await Book.findById(id);
    }catch (err) {
        console.log(err);
    }
    if (!book){
        return res.status(404).json({message:'No book found'})
    }
    return res.status(201).json({ book });
};

const addBook = async (req, res, next) =>{
    const {name,author,description,price,available,image} = req.body;
    let book;
    try{
        book = new Book({
            name,
            author,
            description,
            price,
            available,
            image
        });
        await book.save();
    } catch (err) {
        console.log(err);
    }

    if (!book){
        return res.status(500).json({message:'Unable To Add'})
    }
    return res.status(201).json({ book });
};

const updateBook = async (req, res, next) =>{
    const id = req.params.id;
    const {name,author,description,price,available,image} = req.body;
let book;
try{
    book = await Book.findByIdAndUpdate(id,{
        name,
        author,
        description,
        price,
        available,
        image
    });
    book = await book.save()
}catch (err) {
    console.log(err);
}
if (!book){
    return res.status(404).json({message:'Unable To Update By this ID'});
}
return res.status(200).json({ book });
};


const deleteBook = async (req, res, next)=>{
    const id = req.params.id;
    let book;
    try{
        book = await Book.findByIdAndRemove(id);
    } catch (err) {
        console.log(err);
    }
    if (!book){
        return res.status(404).json({message:'Unable To Delete By this ID'});
    }
    return res.status(200).json({ message:'Product Susseccfully Deleted' });
};

exports.getAllBooks = getAllBooks;
exports.addBook = addBook;
exports.getById = getById;
exports.updateBook = updateBook;
exports.deleteBook = deleteBook;


file -- model-----------------------------------------

book.js


const mongoose = require('mongoose');

const Schema = mongoose.Schema;

const bookSchema = new Schema({
    name:{
        type:String,
        required:true
    },
    author:{
        type:String,
        required:true
    },
    description:{
        type:String,
        required:true
    },
    price:{
        type:Number,
    },
    available:{
        type:Boolean,
        required:true
    },
    image:{
        type:String,
        required:true,
    },


})

module.exports = mongoose.model("Book",bookSchema);

// books 

file - routes--------------------------------------------------

book-routes


const express = require('express');
const router = express.Router();
const Book = require("../model/Book")
const booksController = require("../controllers/books-controller")


router.get("/", booksController.getAllBooks);
router.post("/", booksController.addBook);
router.get("/:id",booksController.getById);
router.put("/:id",booksController.updateBook);
router.delete("/:id",booksController.deleteBook);

module.exports = router;

app.js--------------------


const express = require('express');
const mongoose = require('mongoose');
const router = require("./routes/book-routes");
const app = express();

//middleware
app.use(express.json());
app.use("/books", router)//localhost:5000/books


mongoose.connect("mongodb+srv://bmmv:bmmv@cluster0bookshop.ieqjzjo.mongodb.net/bookStore?retryWrites=true&w=majority")
.then(()=>console.log('DB connected'))
.then(() =>{
    app.listen(5000);
 }).catch((err) => console.log(err));



package.js-----------------


{
  "name": "backend",
  "version": "1.0.0",
  "description": "",
  "main": "app.js",
  "scripts": {
    "start": "nodemon app.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "ISC",
  "dependencies": {
    "express": "^4.18.1",
    "mongoose": "^6.5.4",
    "nodemon": "^2.0.19"
  }
}







